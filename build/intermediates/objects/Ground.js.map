{"version":3,"sources":["../../../game/objects/Ground.js"],"names":["THREE","require","Ground","game","width","length","heightMap","widthSegments","lengthSegments","geometry","PlaneGeometry","loader","TextureLoader","texture","load","wrapS","wrapT","RepeatWrapping","repeat","Vector2","material","MeshPhongMaterial","map","castShadow","receiveShadow","heightMapConstant","position","set","assignHeightMap","name","matrixAutoUpdate","scene","add","updateMatrix","i","vertices","z","computeFaceNormals","computeVertexNormals","x","y","xVertex","yVertex","Math","floor","height","objArray","coords","queueJob","job","coordinates","Vector3","Mesh","module","exports"],"mappings":"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","file":"Ground.js","sourcesContent":["/*\njshint\nnode: true,\nesversion: 6,\nbrowser: true\n*/\n\nconst THREE = require('three');\n\nclass Ground extends THREE.Mesh {\n  constructor(game, width, length, heightMap) {\n\n    let widthSegments = 256;\n    let lengthSegments = 256;\n\n    let geometry = new THREE.PlaneGeometry(width, length, widthSegments - 1, lengthSegments - 1);\n\n    let loader = new THREE.TextureLoader();\n\n    let texture = loader.load('./build/output/assets/sand.jpg');\n        texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n        texture.repeat = new THREE.Vector2(5, 5);\n\n    let material = new THREE.MeshPhongMaterial({\n      map: texture\n    });\n\n    super(geometry, material);\n\n    this.castShadow = true;\n    this.receiveShadow = true;\n    this.heightMapConstant = 10;\n\n    this.position.set(width /2, length / 2, 0);\n\n    this.assignHeightMap(heightMap);\n\n    this.game = game;\n    this.name = \"ground\";\n    this.width = width;\n    this.length = length;\n    this.widthSegments = widthSegments;\n    this.lengthSegments = lengthSegments;\n    this.matrixAutoUpdate = false;\n\n    this.game.scene.add(this);\n    this.updateMatrix();\n  }\n\n  assignHeightMap(heightMap) {\n    /*\n      Height z values stored as 8-bit (max 255) value\n    */\n\n    // iterate over image data\n    for(let i in this.geometry.vertices) {\n      this.geometry.vertices[i].z = heightMap[i] * this.heightMapConstant;\n    }\n\n    this.geometry.computeFaceNormals();\n    this.geometry.computeVertexNormals();\n  }\n\n  getHeight(x, y) {\n\n    // map (0, 0) starts top left; invert that to query proper vertex\n    y = this.length - y;\n\n    // convert world coordinate to vertex coordinate\n    let xVertex = (x / (this.width)) * this.widthSegments;\n    let yVertex = (y / (this.length)) * this.lengthSegments;\n\n    // convert vertex coordinates to vertex number\n    let i = (Math.floor(yVertex) * this.lengthSegments) + Math.floor(xVertex);\n\n    // get height from ground vertices\n    let height = this.geometry.vertices[i].z;\n\n    return height;\n  }\n\n  assign(objArray, coords) {\n    for(let i in objArray) {\n      objArray[i].queueJob({\n        job: 'move',\n        coordinates: new THREE.Vector3(coords.x, coords.y, coords.z)\n      });\n    }\n\n    return true; // stop bubbling\n  }\n}\n\nmodule.exports = Ground;\n"]}