{"version":3,"sources":["../../../game/objects/Cube.js"],"names":["THREE","require","Model","GameSettings","Cube","game","size","Vector3","cube","defaultSize","x","y","z","model","type","speed","growSpeed","resourceCollectionRange","resourceCollectionRate","destinationSize","growthTolerance","growthScalar","minSize","buildRange","buildSpeed","buildStep","movementTolerance","growthVelocity","innerCubeColor","outerCubeColor","selectedColor","unselectedColor","isLoaded","growTowardDestinationSize","doJob","getHighestPriorityJob","meshes","children","outerCubeMeshOutside","outerCubeMeshInside","innerCubeMesh","setInnerCubeColor","setOuterCubeColor","job","box","idle","Box3","setFromObject","building","boundingBox","expandByVector","intersectsBox","setDestination","position","build","resourceNode","collectResource","containsPoint","coordinates","removeJob","console","error","resourceAmountGained","collectionSpeed","window","player","resources","resourceType","canBuild","buildAmt","buildCost","map","resource","amt","i","completion","coords","destination","undefined","queue","filter","obj","momentum","priority","jobPriorities","push","grow","shrink","currentSize","getSize","Math","max","highestPriorityJob","sceneObject","resourceNodes","distance","getDistanceFrom","length","minDistanceNode","mySize","difX","difY","difZ","tolerance","abs","scale","set","selected","color","material","MeshLambertMaterial","needsUpdate","min","module","exports"],"mappings":"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","file":"Cube.js","sourcesContent":["/*\njshint\nnode: true,\nesversion: 6,\nbrowser: true\n*/\n\nconst THREE = require('three');\nconst Model = require('./Model.js');\nconst GameSettings = require('../GameSettings.js');\n\nclass Cube extends Model {\n  constructor(\n    game,\n    size = new THREE.Vector3(\n      GameSettings.cube.defaultSize.x,\n      GameSettings.cube.defaultSize.y,\n      GameSettings.cube.defaultSize.z\n    ),\n    model = './build/output/assets/models/inset-cube.dae'\n  ){\n\n    super(game, model, size);\n\n    this.model = model;\n\n    this.type = \"cube\";\n    this.speed = 25;\n    this.growSpeed = 100;\n\n    // distance can collect from resource within\n    this.resourceCollectionRange = new THREE.Vector3(25, 25, 25);\n    this.resourceCollectionRate = 0.1;\n\n    this.destinationSize = null;\n    this.growthTolerance = 5;\n    this.growthScalar = 0.0001; // scalar that determines growth speed\n    this.minSize = new THREE.Vector3(100, 100, 100);\n\n    this.buildRange = new THREE.Vector3(25, 25, 25); // distance can build within\n    this.buildSpeed = 1; // scalar for amount to build\n    this.buildStep = 1; // amount to build per step\n\n    this.movementTolerance = new THREE.Vector3(1, 1, 1);\n\n    this.growthVelocity = new THREE.Vector3(1, 1, 1);\n\n    this.innerCubeColor = 0x8E1111;\n    this.outerCubeColor = 0x666666;\n    this.selectedColor = 0xFFFFFF;\n    this.unselectedColor = this.innerCubeColor;\n  }\n\n  update() {\n    if(this.isLoaded) {\n      this.growTowardDestinationSize(this.destinationSize);\n      this.doJob(this.getHighestPriorityJob());\n    }\n    super.update();\n  }\n\n  /*\n    Function run one time once model has loaded\n  */\n  onModelLoad() {\n    this.meshes = this.children[0].children[0].children;\n\n    this.outerCubeMeshOutside = this.meshes[0];\n    this.outerCubeMeshInside = this.meshes[1];\n\n    this.innerCubeMesh = this.meshes[2];\n\n    this.setInnerCubeColor(this.innerCubeColor);\n    this.setOuterCubeColor(this.outerCubeColor);\n\n    super.onModelLoad();\n  }\n\n  doJob(job) {\n    let box;\n    switch(job.job) {\n      case 'idle':\n        this.idle();\n        break;\n      case 'build':\n        // create boundingBox for target building\n        box = new THREE.Box3().setFromObject(job.building);\n\n        // move til close enough, then do job\n        if( this.boundingBox.expandByVector(this.buildRange).intersectsBox(box) ) {\n          this.setDestination(this.position);\n          this.build(job);\n        } else {\n          this.setDestination(new THREE.Vector3(\n            job.building.position.x + job.building.size.x/2,\n            job.building.position.y + job.building.size.y/2,\n            0\n          ));\n        }\n        break;\n      case 'collectResource':\n        // create boundingBox for target\n        box = new THREE.Box3().setFromObject(job.resourceNode);\n\n        // move til close enough, then do job\n        if(this.boundingBox.expandByVector(this.resourceCollectionRange).intersectsBox(box)) {\n          this.setDestination(this.position);\n          this.collectResource(job.resourceNode);\n        } else {\n          this.setDestination(new THREE.Vector3(\n            job.resourceNode.position.x + job.resourceNode.size.x/2,\n            job.resourceNode.position.y + job.resourceNode.size.y/2,\n            0\n          ));\n        }\n        break;\n      case 'move':\n        // move til close enough, then cancel job\n        if( this.boundingBox.expandByVector(this.movementTolerance).containsPoint(job.coordinates) ) {\n          this.setDestination(this.position);\n          this.removeJob(job);\n        } else {\n          this.setDestination(job.coordinates);\n        }\n        break;\n      default:\n        console.error(`unrecognized job ${job.job}`);\n        break;\n    }\n  }\n\n  collectResource(resourceNode) {\n    if(resourceNode !== null) {\n\n      // add resources\n      let resourceAmountGained = resourceNode.collectionSpeed * this.resourceCollectionRate;\n\n      window.game.player.resources[resourceNode.resourceType] += resourceAmountGained;\n    } else {\n      console.error(`collectResource encountered null resourceNode`);\n    }\n  }\n\n  /*\n    Automatically removes itself on completion\n    Pauses building if resources insufficient\n  */\n  build(job) {\n    let canBuild = true;\n    let buildAmt = this.buildSpeed * 1;\n    let buildCost = job.building.buildCost.map((resource) => {\n      return {\n        // charge (buildAmt * 1%) of resource\n        type: resource.type,\n        amt: resource.amt * (buildAmt/100)\n      };\n    });\n\n    // determine if player has sufficient resources\n    for(let i in buildCost) {\n      if(buildCost[i].amt > window.game.player.resources[buildCost[i].type]) {\n        // insufficient resources, pause build & break\n        canBuild = false;\n        break;\n      }\n    }\n\n    if(canBuild) {\n      // increase building completion & charge player resource cost\n      let completion = job.building.build(buildAmt);\n\n      if(completion >= 100) {\n        // build complete\n        this.removeJob(job);\n      } else {\n        // build still to go\n\n        // charge player resources\n        for(let i in buildCost) {\n            window.game.player.resources[buildCost[i].type] -= buildCost[i].amt;\n        }\n      }\n    } else {\n      // player doesn't have enough resources; wait til they do before building\n    }\n  }\n\n  setDestination(coords) {\n    this.destination = coords;\n  }\n\n  removeJob(job) {\n    // process job removal\n    switch(job.job) {\n      case 'idle':\n        // do nothing, idle not removable\n        return;\n      case undefined:\n        console.error(`job.job undefined- did you mean to pass a job obj?`);\n        break;\n      default:\n        // remove job from queue\n        this.queue = this.queue.filter((obj) => {\n          return obj.job !== job.job;\n        });\n        break;\n    }\n  }\n\n  /*\n    Called once (externally) when assigning new job\n  */\n  queueJob(job) {\n    // reset pathfinding momentum\n    this.momentum = new THREE.Vector3(0, 0, 0);\n\n    // apply default job priority if undefined\n    if(job.priority === undefined) {\n        job.priority = this.jobPriorities[job.job];\n    }\n\n    // process job addition\n    switch(job.job) {\n      case 'move':\n        for(let i in this.queue) {\n          if(\n            this.queue[i].job === 'move'\n          ) {\n            // at most 1 move instr, queuing updates existing job\n            this.queue[i].coordinates = job.coordinates;\n            return;\n          } else if (\n            // new move job destroys existing build, collectResource jobs\n            this.queue[i].job == 'build' ||\n            this.queue[i].job == 'collectResource'\n          ) {\n            // cancel any existing build, collectResource jobs\n            this.removeJob(this.queue[i]);\n          }\n        }\n        this.queue.push(job);\n        break;\n      case 'idle':\n        // already the default, no need to queue\n        break;\n      case 'grow':\n        // happens async, no need to queue\n        this.grow(job.size);\n        break;\n      case 'shrink':\n        // happens async, no need to queue\n        this.shrink(job.size);\n        break;\n      case 'collectResource':\n        for(let i in this.queue) {\n          if(this.queue[i].job == 'collectResource') {\n            // update current collectResource job\n            this.queue[i] = job;\n            return;\n          } else if (this.queue[i].job == 'move' || this.queue[i].job == 'build') {\n            // cancel any existing move and build jobs\n            this.removeJob(this.queue[i]);\n          }\n        }\n        this.queue.push(job);\n        break;\n      case 'build':\n        for(let i in this.queue) {\n          if(\n            this.queue[i].building == job.building\n          ) {\n            // don't queue build jobs on same building\n            return;\n          } else if (\n            this.queue[i].job == 'move' ||\n            this.queue[i].job == 'build' ||\n            this.queue[i].job == 'collectResource'\n          ) {\n            // cancel any existing move, build, collectResource jobs\n            this.removeJob(this.queue[i]);\n          }\n        }\n        this.queue.push(job);\n        break;\n      default:\n        console.error(`unrecognized job ${job.job}`);\n        break;\n    }\n  }\n\n  idle() {\n    // do nothing\n  }\n\n  /*\n    @size Vector3(x to add, y to add, z to add)\n  */\n  grow(size) {\n    let currentSize = this.getSize();\n\n    this.destinationSize = new THREE.Vector3(\n      currentSize.x + size.x,\n      currentSize.y + size.y,\n      currentSize.z + size.z\n    );\n  }\n\n  /*\n    @size Vector3(x to add, y to add, z to add)\n  */\n  shrink(size) {\n    let currentSize = this.getSize();\n\n    this.destinationSize = new THREE.Vector3(\n      Math.max(currentSize.x - size.x, this.minSize.x),\n      Math.max(currentSize.y - size.y, this.minSize.y),\n      Math.max(currentSize.z - size.z, this.minSize.z)\n    );\n  }\n\n  getHighestPriorityJob() {\n    let priority = 0,\n        highestPriorityJob;\n\n    for(let i in this.queue) {\n      if( this.queue[i].priority > priority ) {\n        highestPriorityJob = this.queue[i];\n      }\n    }\n\n    return highestPriorityJob;\n  }\n\n  getClosestResourceNode() {\n    // find & process all resource nodes\n    let sceneObject;\n    let resourceNodes = window.game.resourceNodes.map((sceneObject) => {\n      sceneObject.distance = this.getDistanceFrom(sceneObject);\n      return sceneObject;\n    });\n\n    // find closest resource node\n    if(resourceNodes.length > 0) {\n      let minDistanceNode = resourceNodes[0];\n      for(let i in resourceNodes) {\n        if(resourceNodes[i].distance < minDistanceNode.distance) {\n          minDistanceNode = resourceNodes[i];\n        }\n      }\n\n      return minDistanceNode;\n    } else {\n      // there are no available resource nodes\n      return null;\n    }\n  }\n\n  growTowardDestinationSize(size) {\n    if(size !== null) {\n      let mySize = this.getSize();\n      let difX = size.x - mySize.x;\n      let difY = size.y - mySize.y;\n      let difZ = size.z - mySize.z;\n\n      // only grow if farther than\n      let tolerance = this.growthTolerance;\n      if(Math.abs(difX) > tolerance || Math.abs(difY) > tolerance || Math.abs(difZ) > tolerance) {\n        // grow\n        this.scale.set(\n          Math.max(this.scale.x + (this.growthScalar * difX), 0),\n          Math.max(this.scale.y + (this.growthScalar * difY), 0),\n          Math.max(this.scale.z + (this.growthScalar * difZ), 0)\n        );\n      }\n\n      this.size = this.getSize();\n    }\n  }\n\n  select(selected = true) {\n    if(selected) {\n      this.setInnerCubeColor(this.selectedColor);\n    } else {\n      this.setInnerCubeColor(this.unselectedColor);\n    }\n  }\n\n  setInnerCubeColor(color) {\n    this.innerCubeMesh.material = new THREE.MeshLambertMaterial({\n      color: color\n    });\n    this.innerCubeMesh.material.needsUpdate = true;\n    this.innerCubeColor = color;\n  }\n\n  setOuterCubeColor(color) {\n    this.outerCubeMeshOutside.material = new THREE.MeshLambertMaterial({\n      color: color\n    });\n\n    this.outerCubeMeshInside.material = new THREE.MeshLambertMaterial({\n      color: Math.min(0, Math.max(color, 0xFFFFFF))\n    });\n\n    this.outerCubeMeshOutside.material.needsUpdate = true;\n    this.outerCubeMeshInside.material.needsUpdate = true;\n\n    this.outerCubeColor = color;\n  }\n\n}\n\nmodule.exports = Cube;\n"]}