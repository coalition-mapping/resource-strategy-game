{"version":3,"sources":["../../../../game/objects/Building/Mine.js"],"names":["THREE","require","Building","GameSettings","Mine","game","size","Vector3","mine","defaultSize","x","y","z","type","status","model","buildingType","buildingHasNotBegunTexture","buildingInProgressTexture","buildingCompleteTexture","buildCost","collectionSpeed","resourceType","completeColor","incompleteColor","meshes","children","baseMesh","cubeMesh","selected","completion","changeCubeColor","changeBaseTexture","buildingNotStartedColor","setCubeHeight","height","boundingBox","Box3","setFromObject","myHeight","max","min","myZScale","scale","Math","texture","baseTexture","tex","textureLoader","load","wrapS","wrapT","RepeatWrapping","repeat","set","material","map","needsUpdate","color","cubeColor","MeshLambertMaterial","objArray","coords","i","queueJob","job","resourceNode","module","exports"],"mappings":"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","file":"Mine.js","sourcesContent":["/*\njshint\nnode: true,\nesversion: 6,\nbrowser: true\n*/\n\nconst THREE = require('three');\nconst Building = require('./Building.js');\nconst GameSettings = require('../../GameSettings.js');\n\nclass Mine extends Building {\n  constructor(\n    game,\n    size = new THREE.Vector3(\n      GameSettings.mine.defaultSize.x,\n      GameSettings.mine.defaultSize.y,\n      GameSettings.mine.defaultSize.z\n    ),\n    type = 'mine',\n    status = 'incomplete'\n  ) {\n    let model = GameSettings.mine.model;\n    super(game, model, size, status);\n\n    this.buildingType = GameSettings.mine.type;\n\n    this.buildingHasNotBegunTexture = GameSettings.mine.buildingHasNotBegunTexture;\n    this.buildingInProgressTexture = GameSettings.mine.buildingInProgressTexture;\n    this.buildingCompleteTexture = GameSettings.mine.buildingCompleteTexture;\n\n    this.buildCost = GameSettings.mine.buildCost;\n\n    this.collectionSpeed = GameSettings.mine.collectionSpeed;\n    this.resourceType = GameSettings.mine.resourceType;\n\n    this.completeColor = GameSettings.mine.completeColor;\n    this.incompleteColor = GameSettings.mine.incompleteColor;\n  }\n\n  update() {\n    super.update();\n  }\n\n  onModelLoad() {\n    this.meshes = this.children[0].children[0].children;\n    this.baseMesh = this.meshes[0];\n    this.cubeMesh = this.meshes[1];\n    super.onModelLoad();\n  }\n\n  updateAppearanceByCompletion() {\n    if(!this.selected) {\n      if(this.completion >= 100) {\n        this.changeCubeColor(this.completeColor);\n        this.changeBaseTexture(this.buildingCompleteTexture);\n      } else if (this.completion === 0) {\n        this.changeCubeColor(this.buildingNotStartedColor);\n        this.changeBaseTexture(this.buildingHasNotBegunTexture);\n      } else {\n        this.changeBaseTexture(this.buildingInProgressTexture);\n        this.changeCubeColor(this.incompleteColor);\n      }\n    } else {\n      this.changeCubeColor(0xFFFFFF);\n    }\n\n    // raise cube according to completion\n    this.setCubeHeight(2 * this.completion);\n  }\n\n  setCubeHeight(height) {\n    let boundingBox = new THREE.Box3().setFromObject(this.cubeMesh);\n    let myHeight = boundingBox.max.z - boundingBox.min.z;\n    let myZScale = this.cubeMesh.scale.z;\n\n    this.cubeMesh.scale.z = Math.max((myZScale * height)/myHeight, 0.1);\n  }\n\n  changeBaseTexture(texture) {\n    if(this.baseTexture !== texture) {\n      let tex = this.textureLoader.load(texture);\n\n      tex.wrapS = tex.wrapT = THREE.RepeatWrapping;\n      tex.repeat.set(2, 2);\n\n      this.meshes = this.children[0].children[0].children;\n      this.meshes[0].material.map = tex;\n      this.meshes[0].material.needsUpdate = true;\n      this.baseTexture = texture;\n    }\n  }\n\n  changeCubeColor(color) {\n    if(this.cubeColor !== color) {\n      this.cubeMesh.material = new THREE.MeshLambertMaterial({\n        color: color\n      });\n      this.cubeMesh.material.needsUpdate = true;\n      this.cubeColor = color;\n    }\n  }\n\n  /*\n    @objArray an array of current selectedUnits\n    @coords the intersection of mouse raycast and this object\n    This is called whenever a player right-clicks on this object while selectedObjects.length > 0\n  */\n  assign(objArray, coords) {\n\n    if(this.completion >= 100) {\n      for(let i in objArray) {\n        objArray[i].queueJob({\n          job: 'collectResource',\n          resourceNode: this\n        });\n      }\n    } else {\n      super.assign(objArray, coords);\n    }\n\n    return true;\n  }\n}\n\nmodule.exports = Mine;\n"]}