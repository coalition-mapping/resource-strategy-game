{"version":3,"sources":["../../../game/objects/Model.js"],"names":["THREE","require","ColladaLoader","Model","game","model","size","isModel","loader","textureLoader","isLoaded","onModelLoadRun","load","raycaster","Raycaster","speed","velocity","Vector3","destination","momentum","castShadow","receiveShadow","selectedColor","unselectedColor","jobPriorities","queue","job","priority","destinationTolerance","undefined","result","add","scene","matrixWorldNeedsUpdate","tempSize","getSize","scale","set","x","y","z","onModelLoad","bind","console","error","boundingBox","Box3","setFromObject","moveTowardDestination","dif","absDif","centerPoint","position","mapHeight","ground","getHeight","i","Math","abs","isWithinDestinationTolerance","expandByVector","containsPoint","d","sqrt","pow","col","collisionChecklist","concat","buildings","resourceNodes","unit","min","max","intersectObjects","near","far","numRays","cubes","units","pi","theta","collisions","cos","sin","direction","length","obj","object","parent","indexOf","push","distances","point","selected","log","mine","objectsArray","coords","name","type","Object3D","module","exports"],"mappings":"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","file":"Model.js","sourcesContent":["/*\njshint\nnode: true,\nesversion: 6,\nbrowser: true\n*/\n\nconst THREE = require('three');\nconst ColladaLoader = require('./ColladaLoader.js');\n\nclass Model extends THREE.Object3D {\n  constructor(game, model, size) {\n    super();\n\n    this.game = game;\n    this.size = size;\n    this.isModel = true;\n    this.model = model;\n\n    this.loader = this.game.loader;\n    this.textureLoader = this.game.textureLoader;\n\n    // load model asyncronously\n    this.isLoaded = false;\n    this.onModelLoadRun = false;\n    this.load();\n\n    this.raycaster = new THREE.Raycaster();\n\n    // movement options\n    this.speed = 0;\n    this.velocity = new THREE.Vector3(0, 0, 0);\n    this.destination = null;\n    this.momentum = new THREE.Vector3(0, 0, 0);\n\n    // render options\n    this.castShadow = true;\n    this.receiveShadow = true;\n\n    this.selectedColor = 0xFFFFFF;\n    this.unselectedColor = 0xCC0000;\n\n    this.jobPriorities = {\n      'move': 8,\n      'build': 6,\n      'collectResource': 5,\n      'goToClosestResourceNode': 2,\n      'idle': 1\n    };\n\n    // priority queue of jobs\n    this.queue = [{\n      job: 'idle',\n      priority: 1\n    }];\n\n    this.destinationTolerance = new THREE.Vector3(1, 1, 1); // tolerance for how close an object must get before stopping\n  }\n\n  load() {\n    if(this.model !== null && this.model !== undefined) {\n\n      // asyncronously load model\n      this.loader.load(this.model, ((result) => {\n\n        // attach loaded model as child of this\n        this.add(result.scene);\n\n        this.matrixWorldNeedsUpdate = true;\n\n        let tempSize = this.getSize();\n\n        // set initial scale\n        this.scale.set(\n          this.size.x / tempSize.x,\n          this.size.y / tempSize.y,\n          this.size.z / tempSize.z\n        );\n\n        // add this to game scene\n        this.game.scene.add(this);\n\n        // calculate size\n        this.size = this.getSize();\n\n        this.onModelLoad();\n        this.isLoaded = true;\n\n      }).bind(this));\n\n    } else {\n      console.error(`Model() tried loading a null or undefined model`);\n    }\n  }\n\n  onModelLoad() {\n    this.boundingBox = new THREE.Box3().setFromObject(this);\n    this.onModelLoadRun = true;\n  }\n\n  update() {\n    if(this.isLoaded && this.onModelLoadRun) {\n      // main update loop\n      this.moveTowardDestination(this.destination);\n    } else {\n      // loading model...\n    }\n  }\n\n  /*\n    Includes collision detection and automatic path correction\n  */\n  moveTowardDestination(destination) {\n\n    if(destination !== null && destination !== undefined) {\n\n      let dif = new THREE.Vector3(0, 0, 0),\n          absDif = new THREE.Vector3(0, 0, 0);\n\n      let centerPoint = new THREE.Vector3(\n        this.position.x + this.size.x/2,\n        this.position.y + this.size.y/2,\n        this.position.z // we want the floor of the model to determine its position\n      );\n\n      let mapHeight = this.game.ground.getHeight(centerPoint.x, centerPoint.y);\n\n      // calculate distance from center of floor of model to destination\n      for(let i in {'x':null, 'y':null, 'z':null}) {\n        dif[i] = destination[i] - centerPoint[i];\n        absDif[i] = Math.abs(dif[i]);\n      }\n\n      // create collision detection bounding box for this\n      this.boundingBox = new THREE.Box3().setFromObject(this);\n\n      let isWithinDestinationTolerance = this.boundingBox.expandByVector(this.destinationTolerance).containsPoint(this.destination);\n\n      // only move if not already there\n      if(!isWithinDestinationTolerance) {\n\n        // calculate euclidian speed (total 3d speed should be this.speed)\n        let d = Math.sqrt(Math.pow(dif.x, 2) + Math.pow(dif.y, 2) + Math.pow(dif.z, 2));\n\n        // determine 3d velocity\n        for(let i in {'x':null, 'y':null, 'z':null}) {\n          // move at constant speed no matter the direction\n          this.velocity[i] = (this.speed * dif[i]) / d;\n\n          // update position, but don't move more than the difference\n          if(absDif[i] <= Math.abs(this.velocity[i])) {\n            this.velocity[i] = dif[i];\n          }\n        }\n\n        // track collision detections\n        let col = new THREE.Vector3(0, 0, 0);\n\n        // create list of collision-eligable units to check for\n        let collisionChecklist = [].concat(\n          this.game.buildings,\n          this.game.resourceNodes\n        );\n\n        // check for potential collision, storing result in col\n        for(let i in collisionChecklist) {\n          let unit = collisionChecklist[i];\n\n          if(unit != this) {\n            if(\n              (this.boundingBox.min.x + this.velocity.x <= unit.boundingBox.max.x && this.boundingBox.max.x >= unit.boundingBox.min.x) &&\n              (this.boundingBox.min.y < unit.boundingBox.max.y && this.boundingBox.max.y > unit.boundingBox.min.y) &&\n              this.velocity.x < 0\n            ) {\n              // moving -x collision\n              col.x = -1;\n            }\n\n            if(\n              (this.boundingBox.max.x + this.velocity.x >= unit.boundingBox.min.x && this.boundingBox.min.x + this.velocity.x <= unit.boundingBox.max.x) &&\n              (this.boundingBox.min.y < unit.boundingBox.max.y && this.boundingBox.max.y > unit.boundingBox.min.y) &&\n              this.velocity.x > 0\n            ) {\n              // moving +x collision\n              col.x = 1;\n            }\n\n            if(\n              (this.boundingBox.min.y + this.velocity.y <= unit.boundingBox.max.y && this.boundingBox.max.y + this.velocity.y >= unit.boundingBox.min.y) &&\n              (this.boundingBox.min.x < unit.boundingBox.max.x && this.boundingBox.max.x > unit.boundingBox.min.x) &&\n              this.velocity.y < 0\n            ) {\n              // moving -y collision\n              col.y = -1;\n            }\n\n            if(\n              (this.boundingBox.max.y + this.velocity.y >= unit.boundingBox.min.y && this.boundingBox.min.y + this.velocity.y <= unit.boundingBox.max.y) &&\n              (this.boundingBox.min.x < unit.boundingBox.max.x && this.boundingBox.max.x > unit.boundingBox.min.x) &&\n              this.velocity.y > 0\n            ) {\n              // moving +y collision\n              col.y = 1;\n            }\n          }\n        }\n\n        // horizontal collision\n        if(col.x) {\n\n          this.velocity.x = 0;\n\n          if(!this.momentum.y) {\n            if(this.velocity.y < 0) {\n              this.momentum.y = -1;\n            } else {\n              this.momentum.y = 1;\n            }\n          }\n\n          this.momentum.x = 0;\n\n          this.velocity.y = this.momentum.y * this.speed;\n\n        }\n\n        // vertical collision\n        if(col.y) {\n\n          this.velocity.y = 0;\n\n          if(!this.momentum.x) {\n            if(this.velocity.x < 0) {\n              this.momentum.x = -1;\n            } else {\n              this.momentum.x = 1;\n            }\n          }\n\n          this.momentum.y = 0;\n\n          this.velocity.x = this.momentum.x * this.speed;\n\n        }\n\n        // if freely moving, reset momentum\n        if(!col.y && !col.x) {\n          this.momentum.x = 0;\n          this.momentum.y = 0;\n        }\n\n        // do the movement\n        for(let i in {'x':null, 'y':null}) {\n          this.position[i] += this.velocity[i];\n        }\n\n        // snap to ground\n        this.position.z = mapHeight;\n\n      } else {\n        // already within destinationTolerance, don't move\n        this.momentum.x = 0;\n        this.momentum.y = 0;\n      }\n    } else {\n      // destination is null, don't move\n    }\n  }\n\n  /*\n    Collision detection within @radius over @intersectObjects\n\n    @radius: radius to check for colliosion from center of this\n    @intersectObjects: array of objects to check for collision\n    @near: min distance collions can occur\n    @far: max distance collisions can occur\n  */\n  getClosebyUnits(intersectObjects, near, far, numRays) {\n\n    if(intersectObjects === undefined) {\n      intersectObjects = [].concat(\n        this.game.cubes,\n        this.game.resourceNodes,\n        this.game.buildings\n      );\n    }\n\n    if(near === undefined) {\n      near = 0;\n    }\n\n    if(far === undefined) {\n      far = 1000;\n    }\n\n    if(numRays === undefined) {\n      numRays = 100;\n    }\n\n    let centerPoint = new THREE.Vector3(\n      this.position.x + this.size.x/2,\n      this.position.y + this.size.y/2,\n      this.position.z + this.size.z/2\n    );\n\n    let raycaster = new THREE.Raycaster(centerPoint, new THREE.Vector3(0, 0, 0), near, far);\n\n    let units = [];\n\n    let pi = 3.14;\n\n    let theta, x, y, collisions;\n\n    // cast rays in circle, starting in center of this\n    for( let i = 0; i < numRays; i++ ) {\n\n      theta = (i / numRays) * (pi * 2);\n      x = Math.cos(theta);\n      y = Math.sin(theta);\n\n      // create normalized direction vector\n      let direction = new THREE.Vector3(x, y, 0);\n\n      raycaster.set(centerPoint, direction);\n\n      collisions = raycaster.intersectObjects(intersectObjects, true);\n\n      if(collisions.length > 0) {\n\n          for(let i in collisions) {\n            let obj = collisions[i].object;\n            while(obj.parent !== this.game.scene) {\n              obj = obj.parent;\n            }\n\n            if(obj !== this && units.indexOf(obj) < 0) {\n              units.push(obj);\n            }\n          }\n      }\n    }\n\n    return units;\n  }\n\n  getSize() {\n    let boundingBox = new THREE.Box3().setFromObject(this);\n\n    return new THREE.Vector3(\n      boundingBox.max.x - boundingBox.min.x,\n      boundingBox.max.y - boundingBox.min.y,\n      boundingBox.max.z - boundingBox.min.z\n    );\n  }\n\n  getCollisionPointFrom(obj) {\n\n    let destination = new THREE.Vector3(0, 0, 0);\n\n    for(let i in {'x': null, 'y':null, 'z':null}) {\n\n      if( this.position[i] > obj.position[i] + obj.size[i] ) { // obj to left of this\n        destination[i] = this.position[i] - obj.size[i];\n      } else if( this.position[i] + this.size[i] > obj.position[i] + obj.size[i] ) { // obj above/below this\n        destination[i] = obj.position[i];\n      } else { // obj to right of this\n        destination[i] = this.position[i] + this.size[i];\n      }\n    }\n\n    return destination;\n  }\n\n  /*\n    @distances: a Vector3 obj describing the bounds to check within\n    @obj: a scene object or Vector3 coordinate object to check how far we are\n  */\n  isWithinFrom(distances, obj) {\n\n    if(obj.position === undefined) {\n      obj.position = obj;\n      obj.size = new THREE.Vector3(0, 0, 0);\n    }\n\n    for(let i in {'x': null, 'y':null, 'z':null}) {\n\n      if(\n        this.position[i] - distances[i] <= obj.position[i] + obj.size[i] &&\n        this.position[i] + this.size[i] + distances[i] >= obj.position[i]\n      ) {\n        continue;\n      } else {\n        return false;\n      }\n\n    }\n\n    return true;\n  }\n\n  getDistanceFrom(obj) {\n    let point = new THREE.Vector3();\n\n    if(\n      obj.x !== undefined &&\n      obj.y !== undefined &&\n      obj.z !== undefined\n    ) {\n      // obj is Vector3\n      point = obj;\n    } else {\n      // assume its a gameobj\n      point = obj.position;\n    }\n\n    // 3-dimensional pythagorean formula\n    return Math.sqrt(\n      Math.pow(this.position.x - point.x, 2) +\n      Math.pow(this.position.y - point.y, 2) +\n      Math.pow(this.position.z - point.z, 2)\n    );\n  }\n\n  select(selected = true) {\n    if(selected) {\n      // need to figure out a universal 'selection' effect and put it here\n      // maybe something like a ring around them? or flag above them?\n      console.log(`Model(): selected ${this.mine}, but haven't implemented appearance change yet. Try overriding?`);\n    } else {\n      console.log(`Model(): deselected ${this.mine}, but haven't implemented appearance change yet. Try overriding?`);\n    }\n  }\n\n  /*\n    @objArray an array of current selectedObjects\n    @coords the intersection of mouse raycast and this object\n    This is called whenever a player right-clicks on this object while selectedObjects.length > 0\n  */\n  assign(objectsArray, coords) {\n    // if bubbling should continue, return falsey\n    // otherwise, the click stops bubbling down\n    return null;\n  }\n\n  /*\n    HTML to display inside the selectedUnitsInterface div\n    Intended to be ovverridden with \"menu actions\" for units/buildings/etc\n  */\n  getInterfaceHtml() {\n    return `\n    <p>${this.name} : ${this.type}</p>\n    <ul class=\"actions\">\n      <li><span>No actions available.</span></li>\n    </ul>\n    `;\n  }\n\n  getQueueHTML() {\n    return ``;\n  }\n}\n\nmodule.exports = Model;\n"]}