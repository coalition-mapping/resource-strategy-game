{"version":3,"sources":["../../../game/objects/Cube-Box.js"],"names":["THREE","require","SceneObject","Cube","size","Vector3","geometry","BoxGeometry","x","y","z","material","MeshLambertMaterial","color","type","speed","growSpeed","resourceCollectionRange","resourceCollectionRate","minSize","growthTolerance","destinationSize","growthScalar","buildRange","buildSpeed","buildStep","movementTolerance","growthVelocity","selectedColor","jobPriorities","queue","job","priority","growTowardDestinationSize","doJob","highestPriorityJob","idle","getDistanceFrom","building","build","move","position","resourceNode","collectResource","coordinates","removeJob","console","error","resourceAmountGained","collectionSpeed","window","game","player","resources","resourceType","canBuild","buildAmt","buildCost","map","resource","amt","i","completion","coords","destination","push","grow","shrink","splice","currentSize","getSize","Math","max","sceneObject","resourceNodes","distance","length","minDistanceNode","mySize","difX","difY","difZ","tolerance","abs","scale","set","module","exports"],"mappings":";;;;;;;;;;;;AAAA;;;;;;;AAOA,IAAMA,QAAQC,QAAQ,OAAR,CAAd;AACA,IAAMC,cAAcD,QAAQ,kBAAR,CAApB;;IAEME,I;;;AACJ,gBAAYC,IAAZ,EAAkB;AAAA;;AAChB,QAAG,CAACA,IAAJ,EAAU;AACR;AACAA,aAAO,IAAIJ,MAAMK,OAAV,CACL,GADK,EAEL,GAFK,EAGL,GAHK,CAAP;AAKD;AACD,QAAIC,WAAW,IAAIN,MAAMO,WAAV,CAAsBH,KAAKI,CAA3B,EAA8BJ,KAAKK,CAAnC,EAAsCL,KAAKM,CAA3C,CAAf;AACA,QAAIC,WAAW,IAAIX,MAAMY,mBAAV,CAA8B;AAC3CC,aAAO;AADoC,KAA9B,CAAf;;AAVgB,4GAcVP,QAdU,EAcAK,QAdA;;AAgBhB,UAAKG,IAAL,GAAY,MAAZ;AACA,UAAKC,KAAL,GAAa,EAAb;AACA,UAAKC,SAAL,GAAiB,GAAjB;AACA,UAAKC,uBAAL,GAA+B,GAA/B;AACA,UAAKC,sBAAL,GAA8B,GAA9B;AACA,UAAKC,OAAL,GAAe,IAAInB,MAAMK,OAAV,CAAkB,GAAlB,EAAuB,GAAvB,EAA4B,GAA5B,CAAf;AACA,UAAKe,eAAL,GAAuB,CAAvB;;AAEA,UAAKC,eAAL,GAAuB,IAAvB;AACA,UAAKC,YAAL,GAAoB,MAApB,CAzBgB,CAyBY;;AAE5B,UAAKC,UAAL,GAAkB,GAAlB,CA3BgB,CA2BO;AACvB,UAAKC,UAAL,GAAkB,CAAlB,CA5BgB,CA4BK;AACrB,UAAKC,SAAL,GAAiB,CAAjB,CA7BgB,CA6BI;;AAEpB,UAAKC,iBAAL,GAAyB,GAAzB;;AAEA,UAAKC,cAAL,GAAsB,IAAI3B,MAAMK,OAAV,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CAAtB;;AAEA,UAAKuB,aAAL,GAAqB,QAArB;;AAEA,UAAKC,aAAL,GAAqB;AACnB,cAAQ,CADW;AAEnB,eAAS,CAFU;AAGnB,yBAAmB,CAHA;AAInB,iCAA2B,CAJR;AAKnB,cAAQ;AALW,KAArB;;AAQC;AACD,UAAKC,KAAL,GAAa,CAAC;AACZC,WAAK,MADO;AAEZC,gBAAU;AAFE,KAAD,CAAb;;AA9CgB;AAmDjB;;;;6BAEQ;AACP,WAAKC,yBAAL,CAA+B,KAAKZ,eAApC;;AAEA,WAAKa,KAAL,CAAW,KAAKC,kBAAL,EAAX;;AAEA;AACD;;;0BAEKJ,G,EAAK;AACT,cAAOA,IAAIA,GAAX;AACE,aAAK,MAAL;AACE,eAAKK,IAAL;AACA;AACF,aAAK,OAAL;AACE;AACA,cAAG,KAAKC,eAAL,CAAqBN,IAAIO,QAAzB,IAAqC,KAAKf,UAA7C,EAAyD;AACvD,iBAAKgB,KAAL,CAAWR,GAAX;AACD,WAFD,MAEO;AACL,iBAAKS,IAAL,CAAUT,IAAIO,QAAJ,CAAaG,QAAvB;AACD;AACD;AACF,aAAK,iBAAL;AACE;AACA,cAAG,KAAKJ,eAAL,CAAqBN,IAAIW,YAAzB,IAAyC,KAAKzB,uBAAjD,EAA0E;AACxE,iBAAK0B,eAAL,CAAqBZ,IAAIW,YAAzB;AACD,WAFD,MAEO;AACL,iBAAKF,IAAL,CAAUT,IAAIW,YAAJ,CAAiBD,QAA3B;AACD;AACD;AACF,aAAK,MAAL;AACE;AACA,cAAG,KAAKJ,eAAL,CAAqBN,IAAIa,WAAzB,IAAwC,KAAKlB,iBAAhD,EAAmE;AACjE,iBAAKc,IAAL,CAAUT,IAAIa,WAAd;AACD,WAFD,MAEO;AACL,iBAAKC,SAAL,CAAed,GAAf;AACD;AACD;AACF;AACEe,kBAAQC,KAAR,uBAAkChB,IAAIA,GAAtC;AACA;AA9BJ;AAgCD;;;oCAEeW,Y,EAAc;AAC5B,UAAGA,iBAAiB,IAApB,EAA0B;AACxB;AACA,YAAIM,uBAAuBN,aAAaO,eAAb,GAA+B,KAAK/B,sBAA/D;;AAEAgC,eAAOC,IAAP,CAAYC,MAAZ,CAAmBC,SAAnB,CAA6BX,aAAaY,YAA1C,KAA2DN,oBAA3D;AACD,OALD,MAKO;AACLF,gBAAQC,KAAR;AACD;AACF;;AAED;;;;;;;0BAIMhB,G,EAAK;AACT,UAAIwB,WAAW,IAAf;AACA,UAAIC,WAAW,KAAKhC,UAAL,GAAkB,CAAjC;AACA,UAAIiC,YAAY1B,IAAIO,QAAJ,CAAamB,SAAb,CAAuBC,GAAvB,CAA2B,UAACC,QAAD,EAAc;AACvD,eAAO;AACL;AACA7C,gBAAM6C,SAAS7C,IAFV;AAGL8C,eAAKD,SAASC,GAAT,IAAgBJ,WAAS,GAAzB;AAHA,SAAP;AAKD,OANe,CAAhB;;AAQA;AACA,WAAI,IAAIK,CAAR,IAAaJ,SAAb,EAAwB;AACtB,YAAGA,UAAUI,CAAV,EAAaD,GAAb,GAAmBV,OAAOC,IAAP,CAAYC,MAAZ,CAAmBC,SAAnB,CAA6BI,UAAUI,CAAV,EAAa/C,IAA1C,CAAtB,EAAuE;AACrE;AACAyC,qBAAW,KAAX;AACA;AACD;AACF;;AAED,UAAGA,QAAH,EAAa;;AAEX,YAAIO,aAAa/B,IAAIO,QAAJ,CAAaC,KAAb,CAAmBiB,QAAnB,CAAjB;;AAEA,YAAGM,cAAc,GAAjB,EAAsB;AACpB;AACA,eAAKjB,SAAL,CAAed,GAAf;AACD,SAHD,MAGO;AACL;;AAEA;AACA,eAAI,IAAI8B,EAAR,IAAaJ,SAAb,EAAwB;AACpBP,mBAAOC,IAAP,CAAYC,MAAZ,CAAmBC,SAAnB,CAA6BI,UAAUI,EAAV,EAAa/C,IAA1C,KAAmD2C,UAAUI,EAAV,EAAaD,GAAhE;AACH;AACF;AACF,OAfD,MAeO;AACL;AACD;AACF;;;yBAEIG,M,EAAQ;AACX,WAAKC,WAAL,GAAmBD,MAAnB;AACD;;;2BAEM;AACL,WAAKC,WAAL,GAAmB,KAAKvB,QAAxB;AACD;;;6BAEQV,G,EAAK;AACZ;AACAA,UAAIC,QAAJ,GAAe,KAAKH,aAAL,CAAmBE,IAAIA,GAAvB,CAAf;;AAEA;AACA,cAAOA,IAAIA,GAAX;AACE,aAAK,MAAL;AACE,eAAI,IAAI8B,CAAR,IAAa,KAAK/B,KAAlB,EAAyB;AACvB;AACA,gBAAG,KAAKA,KAAL,CAAW+B,CAAX,EAAc9B,GAAd,KAAsB,MAAzB,EAAiC;AAC/B,mBAAKD,KAAL,CAAW+B,CAAX,EAAcjB,WAAd,GAA4Bb,IAAIa,WAAhC;AACD,aAFD,MAEO,IAAG,KAAKd,KAAL,CAAW+B,CAAX,EAAc9B,GAAd,IAAqB,OAArB,IAAgC,KAAKD,KAAL,CAAW+B,CAAX,EAAc9B,GAAd,IAAqB,iBAAxD,EAA2E;AAChF,mBAAKc,SAAL,CAAe,KAAKf,KAAL,CAAW+B,CAAX,CAAf;AACD;AACF;AACD,eAAK/B,KAAL,CAAWmC,IAAX,CAAgBlC,GAAhB;AACA;AACF,aAAK,MAAL;AACE;AACA;AACF,aAAK,MAAL;AACE;AACA,eAAKmC,IAAL,CAAUnC,IAAI3B,IAAd;AACA;AACF,aAAK,QAAL;AACE;AACA,eAAK+D,MAAL,CAAYpC,IAAI3B,IAAhB;AACA;AACF,aAAK,iBAAL;AACE,eAAI,IAAIyD,GAAR,IAAa,KAAK/B,KAAlB,EAAyB;AACvB,gBAAG,KAAKA,KAAL,CAAW+B,GAAX,EAAc9B,GAAd,IAAqB,iBAAxB,EAA2C;AACzC;AACA,mBAAKD,KAAL,CAAW+B,GAAX,IAAgB9B,GAAhB;AACA;AACD,aAJD,MAIO,IAAI,KAAKD,KAAL,CAAW+B,GAAX,EAAc9B,GAAd,IAAqB,MAArB,IAA+B,KAAKD,KAAL,CAAW+B,GAAX,EAAc9B,GAAd,IAAqB,OAAxD,EAAiE;AACtE;AACA,mBAAKc,SAAL,CAAe,KAAKf,KAAL,CAAW+B,GAAX,CAAf;AACD;AACF;AACD,eAAK/B,KAAL,CAAWmC,IAAX,CAAgBlC,GAAhB;AACA;AACF,aAAK,OAAL;AACE,eAAI,IAAI8B,GAAR,IAAa,KAAK/B,KAAlB,EAAyB;AACvB,gBAAG,KAAKA,KAAL,CAAW+B,GAAX,EAAcvB,QAAd,IAA0BP,IAAIO,QAAjC,EAA2C;AACzC;AACA;AACD,aAHD,MAGO,IAAI,KAAKR,KAAL,CAAW+B,GAAX,EAAc9B,GAAd,IAAqB,MAArB,IAA+B,KAAKD,KAAL,CAAW+B,GAAX,EAAc9B,GAAd,IAAqB,OAApD,IAA+D,KAAKD,KAAL,CAAW+B,GAAX,EAAc9B,GAAd,IAAqB,iBAAxF,EAA2G;AAChH;AACA,mBAAKc,SAAL,CAAe,KAAKf,KAAL,CAAW+B,GAAX,CAAf;AACD;AACF;AACD,eAAK/B,KAAL,CAAWmC,IAAX,CAAgBlC,GAAhB;AACA;AACF;AACEe,kBAAQC,KAAR,uBAAkChB,IAAIA,GAAtC;AACA;AAlDJ;AAoDD;;;8BAESA,G,EAAK;AACb;AACA,cAAOA,IAAIA,GAAX;AACE,aAAK,MAAL;AACE;AACA;AACF,aAAK,WAAL;AACEe,kBAAQC,KAAR;AACA;AACF;AACE;AACA,eAAI,IAAIc,CAAR,IAAa,KAAK/B,KAAlB,EAAyB;AACvB,gBAAG,KAAKA,KAAL,CAAW+B,CAAX,EAAc9B,GAAd,IAAqBA,IAAIA,GAA5B,EAAiC;AAC/B,mBAAKD,KAAL,CAAWsC,MAAX,CAAkBP,CAAlB,EAAqB,CAArB;AACD;AACF;AACD;AAdJ;AAgBD;;;2BAEM,CAEN;AADC;;;AAGF;;;;;;yBAGKzD,I,EAAM;AACT,UAAIiE,cAAc,KAAKC,OAAL,EAAlB;;AAEA,WAAKjD,eAAL,GAAuB,IAAIrB,MAAMK,OAAV,CACrBgE,YAAY7D,CAAZ,GAAgBJ,KAAKI,CADA,EAErB6D,YAAY5D,CAAZ,GAAgBL,KAAKK,CAFA,EAGrB4D,YAAY3D,CAAZ,GAAgBN,KAAKM,CAHA,CAAvB;AAKD;;AAED;;;;;;2BAGON,I,EAAM;AACX,UAAIiE,cAAc,KAAKC,OAAL,EAAlB;;AAEA,WAAKjD,eAAL,GAAuB,IAAIrB,MAAMK,OAAV,CACrBkE,KAAKC,GAAL,CAASH,YAAY7D,CAAZ,GAAgBJ,KAAKI,CAA9B,EAAiC,KAAKW,OAAL,CAAaX,CAA9C,CADqB,EAErB+D,KAAKC,GAAL,CAASH,YAAY5D,CAAZ,GAAgBL,KAAKK,CAA9B,EAAiC,KAAKU,OAAL,CAAaV,CAA9C,CAFqB,EAGrB8D,KAAKC,GAAL,CAASH,YAAY3D,CAAZ,GAAgBN,KAAKM,CAA9B,EAAiC,KAAKS,OAAL,CAAaT,CAA9C,CAHqB,CAAvB;AAKD;;;yCAEoB;AACnB,UAAIsB,WAAW,CAAf;AAAA,UACIG,2BADJ;AAEA,WAAI,IAAI0B,CAAR,IAAa,KAAK/B,KAAlB,EAAyB;AACvB,YAAG,KAAKA,KAAL,CAAW+B,CAAX,EAAc7B,QAAd,GAAyBA,QAA5B,EAAsC;AACpCG,+BAAqB,KAAKL,KAAL,CAAW+B,CAAX,CAArB;AACD;AACF;AACD,aAAO1B,kBAAP;AACD;;;6CAEwB;AAAA;;AACvB;AACA,UAAIsC,oBAAJ;AACA,UAAIC,gBAAgBxB,OAAOC,IAAP,CAAYuB,aAAZ,CAA0BhB,GAA1B,CAA8B,UAACe,WAAD,EAAiB;AACjEA,oBAAYE,QAAZ,GAAuB,OAAKtC,eAAL,CAAqBoC,WAArB,CAAvB;AACA,eAAOA,WAAP;AACD,OAHmB,CAApB;;AAKA;AACA,UAAGC,cAAcE,MAAd,GAAuB,CAA1B,EAA6B;AAC3B,YAAIC,kBAAkBH,cAAc,CAAd,CAAtB;AACA,aAAI,IAAIb,CAAR,IAAaa,aAAb,EAA4B;AAC1B,cAAGA,cAAcb,CAAd,EAAiBc,QAAjB,GAA4BE,gBAAgBF,QAA/C,EAAyD;AACvDE,8BAAkBH,cAAcb,CAAd,CAAlB;AACD;AACF;;AAED,eAAOgB,eAAP;AACD,OATD,MASO;AACL;AACA,eAAO,IAAP;AACD;AACF;;;8CAEyBzE,I,EAAM;AAC9B,UAAGA,SAAS,IAAZ,EAAkB;AAChB,YAAI0E,SAAS,KAAKR,OAAL,EAAb;AACA,YAAIS,OAAO3E,KAAKI,CAAL,GAASsE,OAAOtE,CAA3B;AACA,YAAIwE,OAAO5E,KAAKK,CAAL,GAASqE,OAAOrE,CAA3B;AACA,YAAIwE,OAAO7E,KAAKM,CAAL,GAASoE,OAAOpE,CAA3B;;AAEA;AACA,YAAIwE,YAAY,KAAK9D,eAArB;AACA,YAAGmD,KAAKY,GAAL,CAASJ,IAAT,IAAiBG,SAAjB,IAA8BX,KAAKY,GAAL,CAASH,IAAT,IAAiBE,SAA/C,IAA4DX,KAAKY,GAAL,CAASF,IAAT,IAAiBC,SAAhF,EAA2F;AACzF;AACA,eAAKE,KAAL,CAAWC,GAAX,CACEd,KAAKC,GAAL,CAAS,KAAKY,KAAL,CAAW5E,CAAX,GAAgB,KAAKc,YAAL,GAAoByD,IAA7C,EAAoD,CAApD,CADF,EAEER,KAAKC,GAAL,CAAS,KAAKY,KAAL,CAAW3E,CAAX,GAAgB,KAAKa,YAAL,GAAoB0D,IAA7C,EAAoD,CAApD,CAFF,EAGET,KAAKC,GAAL,CAAS,KAAKY,KAAL,CAAW1E,CAAX,GAAgB,KAAKY,YAAL,GAAoB2D,IAA7C,EAAoD,CAApD,CAHF;AAKD;;AAED,aAAK7E,IAAL,GAAY,KAAKkE,OAAL,EAAZ;AACD;AACF;;;;EApUgBpE,W;;AAwUnBoF,OAAOC,OAAP,GAAiBpF,IAAjB","file":"Cube-Box.js","sourcesContent":["/*\njshint\nnode: true,\nesversion: 6,\nbrowser: true\n*/\n\nconst THREE = require('three');\nconst SceneObject = require('./SceneObject.js');\n\nclass Cube extends SceneObject {\n  constructor(size) {\n    if(!size) {\n      // defalt size\n      size = new THREE.Vector3(\n        100,\n        100,\n        100\n      );\n    }\n    let geometry = new THREE.BoxGeometry(size.x, size.y, size.z);\n    let material = new THREE.MeshLambertMaterial({\n      color: 0xCC0000\n    });\n\n    super(geometry, material);\n\n    this.type = \"Cube\";\n    this.speed = 25;\n    this.growSpeed = 100;\n    this.resourceCollectionRange = 200;\n    this.resourceCollectionRate = 0.1;\n    this.minSize = new THREE.Vector3(100, 100, 100);\n    this.growthTolerance = 5;\n\n    this.destinationSize = null;\n    this.growthScalar = 0.0001; // scalar that determines growth speed\n\n    this.buildRange = 200; // distance can build within\n    this.buildSpeed = 1; // scalar for amount to build\n    this.buildStep = 1; // amount to build per step\n\n    this.movementTolerance = 200;\n\n    this.growthVelocity = new THREE.Vector3(1, 1, 1);\n\n    this.selectedColor = 0xFFFFFF;\n\n    this.jobPriorities = {\n      'move': 8,\n      'build': 6,\n      'collectResource': 5,\n      'goToClosestResourceNode': 2,\n      'idle': 1\n    };\n\n     // priority queue of jobs\n    this.queue = [{\n      job: 'idle',\n      priority: 1\n    }];\n\n  }\n\n  update() {\n    this.growTowardDestinationSize(this.destinationSize);\n\n    this.doJob(this.highestPriorityJob());\n\n    super.update();\n  }\n\n  doJob(job) {\n    switch(job.job) {\n      case 'idle':\n        this.idle();\n        break;\n      case 'build':\n        // move til close enough, then do job\n        if(this.getDistanceFrom(job.building) < this.buildRange) {\n          this.build(job);\n        } else {\n          this.move(job.building.position);\n        }\n        break;\n      case 'collectResource':\n        // move til close enough, then do job\n        if(this.getDistanceFrom(job.resourceNode) < this.resourceCollectionRange) {\n          this.collectResource(job.resourceNode);\n        } else {\n          this.move(job.resourceNode.position);\n        }\n        break;\n      case 'move':\n        // move til close enough, then cancel job\n        if(this.getDistanceFrom(job.coordinates) > this.movementTolerance) {\n          this.move(job.coordinates);\n        } else {\n          this.removeJob(job);\n        }\n        break;\n      default:\n        console.error(`unrecognized job ${job.job}`);\n        break;\n    }\n  }\n\n  collectResource(resourceNode) {\n    if(resourceNode !== null) {\n      // add resources\n      let resourceAmountGained = resourceNode.collectionSpeed * this.resourceCollectionRate;\n\n      window.game.player.resources[resourceNode.resourceType] += resourceAmountGained;\n    } else {\n      console.error(`collectResource encountered null resourceNode`);\n    }\n  }\n\n  /*\n    Automatically removes itself on completion\n    Pauses building if resources insufficient\n  */\n  build(job) {\n    let canBuild = true;\n    let buildAmt = this.buildSpeed * 1;\n    let buildCost = job.building.buildCost.map((resource) => {\n      return {\n        // charge (buildAmt * 1%) of resource\n        type: resource.type,\n        amt: resource.amt * (buildAmt/100)\n      };\n    });\n\n    // determine if player has sufficient resources\n    for(let i in buildCost) {\n      if(buildCost[i].amt > window.game.player.resources[buildCost[i].type]) {\n        // insufficient resources, pause build & break\n        canBuild = false;\n        break;\n      }\n    }\n\n    if(canBuild) {\n\n      let completion = job.building.build(buildAmt);\n\n      if(completion >= 100) {\n        // build complete\n        this.removeJob(job);\n      } else {\n        // build still to go\n\n        // charge player resources\n        for(let i in buildCost) {\n            window.game.player.resources[buildCost[i].type] -= buildCost[i].amt;\n        }\n      }\n    } else {\n      // player doesn't have enough resources; wait til they do before building\n    }\n  }\n\n  move(coords) {\n    this.destination = coords;\n  }\n\n  stop() {\n    this.destination = this.position;\n  }\n\n  queueJob(job) {\n    // assign job priority\n    job.priority = this.jobPriorities[job.job];\n\n    // process job\n    switch(job.job) {\n      case 'move':\n        for(let i in this.queue) {\n          // at most 1 move instr, queuing updates existing job\n          if(this.queue[i].job === 'move') {\n            this.queue[i].coordinates = job.coordinates;\n          } else if(this.queue[i].job == 'build' || this.queue[i].job == 'collectResource') {\n            this.removeJob(this.queue[i]);\n          }\n        }\n        this.queue.push(job);\n        break;\n      case 'idle':\n        // already the default, no need to queue\n        break;\n      case 'grow':\n        // happens async, no need to queue\n        this.grow(job.size);\n        break;\n      case 'shrink':\n        // happens async, no need to queue\n        this.shrink(job.size);\n        break;\n      case 'collectResource':\n        for(let i in this.queue) {\n          if(this.queue[i].job == 'collectResource') {\n            // update current collectResource job\n            this.queue[i] = job;\n            return;\n          } else if (this.queue[i].job == 'move' || this.queue[i].job == 'build') {\n            // cancel any existing move and build jobs\n            this.removeJob(this.queue[i]);\n          }\n        }\n        this.queue.push(job);\n        break;\n      case 'build':\n        for(let i in this.queue) {\n          if(this.queue[i].building == job.building) {\n            // don't queue build jobs on same building\n            return;\n          } else if (this.queue[i].job == 'move' || this.queue[i].job == 'build' || this.queue[i].job == 'collectResource') {\n            // cancel any existing move and build jobs\n            this.removeJob(this.queue[i]);\n          }\n        }\n        this.queue.push(job);\n        break;\n      default:\n        console.error(`unrecognized job ${job.job}`);\n        break;\n    }\n  }\n\n  removeJob(job) {\n    // process job removal\n    switch(job.job) {\n      case 'idle':\n        // do nothing, idle not removable\n        return;\n      case 'undefined':\n        console.error(`job.job undefined- did you mean to pass a job obj?`);\n        break;\n      default:\n        // remove job from queue\n        for(let i in this.queue) {\n          if(this.queue[i].job == job.job) {\n            this.queue.splice(i, 1);\n          }\n        }\n        break;\n    }\n  }\n\n  idle() {\n    // do nothing\n  }\n\n  /*\n    @size Vector3(x to add, y to add, z to add)\n  */\n  grow(size) {\n    let currentSize = this.getSize();\n\n    this.destinationSize = new THREE.Vector3(\n      currentSize.x + size.x,\n      currentSize.y + size.y,\n      currentSize.z + size.z\n    );\n  }\n\n  /*\n    @size Vector3(x to add, y to add, z to add)\n  */\n  shrink(size) {\n    let currentSize = this.getSize();\n\n    this.destinationSize = new THREE.Vector3(\n      Math.max(currentSize.x - size.x, this.minSize.x),\n      Math.max(currentSize.y - size.y, this.minSize.y),\n      Math.max(currentSize.z - size.z, this.minSize.z)\n    );\n  }\n\n  highestPriorityJob() {\n    let priority = 0,\n        highestPriorityJob;\n    for(let i in this.queue) {\n      if(this.queue[i].priority > priority) {\n        highestPriorityJob = this.queue[i];\n      }\n    }\n    return highestPriorityJob;\n  }\n\n  getClosestResourceNode() {\n    // find & process all resource nodes\n    let sceneObject;\n    let resourceNodes = window.game.resourceNodes.map((sceneObject) => {\n      sceneObject.distance = this.getDistanceFrom(sceneObject);\n      return sceneObject;\n    });\n\n    // find closest resource node\n    if(resourceNodes.length > 0) {\n      let minDistanceNode = resourceNodes[0];\n      for(let i in resourceNodes) {\n        if(resourceNodes[i].distance < minDistanceNode.distance) {\n          minDistanceNode = resourceNodes[i];\n        }\n      }\n\n      return minDistanceNode;\n    } else {\n      // there are no available resource nodes\n      return null;\n    }\n  }\n\n  growTowardDestinationSize(size) {\n    if(size !== null) {\n      let mySize = this.getSize();\n      let difX = size.x - mySize.x;\n      let difY = size.y - mySize.y;\n      let difZ = size.z - mySize.z;\n\n      // only grow if farther than\n      let tolerance = this.growthTolerance;\n      if(Math.abs(difX) > tolerance || Math.abs(difY) > tolerance || Math.abs(difZ) > tolerance) {\n        // grow\n        this.scale.set(\n          Math.max(this.scale.x + (this.growthScalar * difX), 0),\n          Math.max(this.scale.y + (this.growthScalar * difY), 0),\n          Math.max(this.scale.z + (this.growthScalar * difZ), 0)\n        );\n      }\n\n      this.size = this.getSize();\n    }\n  }\n\n}\n\nmodule.exports = Cube;\n"]}